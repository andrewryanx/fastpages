{
  
    
        "post0": {
            "title": "Loops",
            "content": "HackerRank - Python: Loops . Problem: . The provided code stub reads and integer, n , from STDIN. For all non-negative integers i &lt; n, print i2. . Example . The list of non-negative integers that are less than n = 3 is [0,1,2]. Print the square of each number on a separate line. . 0 1 4 . Solution: . n = int(input()) for i in range(n): print(i**2) .",
            "url": "https://andrewryanx.github.io/site/hackerrank/python/2021/01/29/loops.html",
            "relUrl": "/hackerrank/python/2021/01/29/loops.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Division",
            "content": "HackerRank - Python: Division . Problem: . The provided code stub reads two integers, a and b , from STDIN. . Add logic to print two lines. The first line should contain the result of integer division, a//b . The second line should contain the result of float division, a / b. . No rounding or formatting is necessary. . Example a = 3 b = 5 . The result of the integer division 3//5 = 0. The result of the float division is 3//5 = 0.6. . Solution: . a = int(input()) b = int(input()) print(a//b) print(a/b) .",
            "url": "https://andrewryanx.github.io/site/hackerrank/python/2021/01/29/python-division.html",
            "relUrl": "/hackerrank/python/2021/01/29/python-division.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Arithmetic Operators",
            "content": "HackerRank - Python: Arithmetic Operators . Problem: . The provided code stub reads two integers from STDIN, a and b. Add code to print three lines where: . The first line contains the sum of the two numbers. | The second line contains the difference of the two numbers (first - second). | The third line contains the product of the two numbers. | Example . a = 3 b = 5 . Print the following: . 8 -2 15 . Solution: . a=int(input()) b=int(input()) print(a+b) print(a-b) print(a*b) .",
            "url": "https://andrewryanx.github.io/site/hackerrank/python/2021/01/29/arithmetic-operators.html",
            "relUrl": "/hackerrank/python/2021/01/29/arithmetic-operators.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Say "Hello, World!" With Python",
            "content": "HackerRank - Python: Say “Hello, World!” With Python . Problem: . Here is a sample line of code that can be executed in Python: . print(&quot;Hello, World!&quot;) . You can just as easily store a string as a variable and then print it to stdout: . my_string = &quot;Hello, World!&quot; print(my_string) . The above code will print Hello, World! on your screen. Try it yourself in the editor below! . Solution: . print(&quot;Hello, World!&quot;) .",
            "url": "https://andrewryanx.github.io/site/hackerrank/python/2021/01/29/hello-world.html",
            "relUrl": "/hackerrank/python/2021/01/29/hello-world.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Ubuntu Cheat Sheet",
            "content": "Ubuntu Cheat Sheet .",
            "url": "https://andrewryanx.github.io/site/ubuntu/linux/2021/01/29/ubuntu-cheatsheet.html",
            "relUrl": "/ubuntu/linux/2021/01/29/ubuntu-cheatsheet.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Markdown Cheat Sheet",
            "content": "Markdown Cheat Sheet . Mastering Markdown .",
            "url": "https://andrewryanx.github.io/site/markdown/2021/01/29/markdown-cheatsheet.html",
            "relUrl": "/markdown/2021/01/29/markdown-cheatsheet.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Machine Learning Cheat Sheet",
            "content": "Machine Learning Cheat Sheet .",
            "url": "https://andrewryanx.github.io/site/ml/python/2021/01/29/ml-cheatsheet.html",
            "relUrl": "/ml/python/2021/01/29/ml-cheatsheet.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Statistics Cheat Sheet",
            "content": "Statistics Cheat Sheet .",
            "url": "https://andrewryanx.github.io/site/statistics/python/2021/01/29/stats-cheatsheet.html",
            "relUrl": "/statistics/python/2021/01/29/stats-cheatsheet.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Python Cheat Sheet",
            "content": "Python Cheat Sheet . Import Modules . import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import glob . Data Frame I/O . Read CSV . pd.read_csv(&#39;filepath filename.csv&#39;) . Create DataFrame from multiple files and assign filename to column . files = sorted(glob(&#39;filepath *.csv&#39;)); pd.concat((pd.read_csv(file).assign(filename=file) for file in files),ignore_index=True) . Write CSV . pd.to_csv(&#39;filepath filename.csv&#39;, columns=[&#39;columns to write&#39;], index=False) #write csv . Data Manipulation &amp; Interrogation . Select first n number of rows . df.head(n) . Select bottom n number of rows . df.tail(n) . Select random n number of rows . df.sample(n) . Get the shape of the DataFrame . df.shape . Get the dtypes of the columns . df.dtypes . Get the number of rows in dataframe . len(df) . Calculate the number of missing values . df.isna().sum().sum() . Returns series denoting duplicate rows . df.duplicated . Drop duplicates by column . df.drop_duplicates(subset=[&#39;column to check for dupes&#39;], inplace=True) . Drop columns in DataFrame . df.drop(columns=[&#39;column to drop&#39;], inplace=True) . Drop null values . df.dropna(axis=0, how=&#39;any&#39;, subset=[&#39;columns to drop if null values exist&#39;]) . Get the number of distinct values in a column . df[&#39;column&#39;].nunique() . Count numer of rows with each unique value of variable . df[&#39;column&#39;].value_counts() . Replace values in column with new value . df[&#39;column&#39;].replace(&lt;current value&gt;,&lt;target value&gt;) . Group DataFrame by column . df.groupby(&#39;column&#39;) . Sort values of column . df.sortvalues(&#39;column to use&#39;, ascending=True) . Filter DataFrame by multiple OR conditions . df[df.column.isin([&#39;value 1&#39;, &#39;value2&#39;, &#39;value3&#39;])] . Invert filter . df[~df.column.isin([&#39;value 1&#39;, &#39;value2&#39;, &#39;value3&#39;])] . Rename columns . df.rename(columns = {&#39;current name&#39;:&#39;target name&#39;}) . Add prefix to column name . df.add_prefix(&#39;prefix&#39;) . Add suffix to column name . df.add_suffix(&#39;suffix&#39;) . Gather columns into rows . pd.melt(df) . Spread rows into columns . df.pivot(columns=&#39;columns to use&#39;,values=&#39;values to use&#39;) . Select rows by position . df.iloc[0:9] . Select and order top n entries . df.nlargest(n) . Select and order bottom n entries . df.nsmallest(n) . Select columns whose name matches regular expression . df.filter(regex=&#39;search term&#39;) . Make column of strings uppercase . df[&#39;column&#39;].str.upper() . Append rows of multiple dataframes . df.concat([df1, df2]) . Append columns of multiple dataframes . df.concat([df1, df2], axis=1) . Join matching rows drom df1 to df . pd.merge(df1,df2, how=&#39;left&#39;, on=&#39;column to join on&#39;) . Join rows from df2 to df1 . pd.merge(df1,df2, how=&#39;right&#39;, on=&#39;column to join on&#39;) . Join data, retain only rows in both sets . pd.merge(df1,df2, how=&#39;inner&#39;, on=&#39;column to join on&#39;) . Join data, retain all values, all rows . pd.merge(df1,df2, how=&#39;outer&#39;, on=&#39;column to join on&#39;) . Split dataframe into two random subsets, only works if index is unique . df1 = df.sample(frac=0.5,random_state=42); df2 = df.drop(df1.index) . Apply function to dataframe . f = lambda x: &lt;function&gt;; df.apply(f) . df.insert(&lt;location, e.g. 3&gt;, &#39;column name&#39;) . Split string to new column, keeping first word . df[&#39;column&#39;] = df.column.str.split(&#39;, &#39;,expand=True)[0] . Descriptive Statistics . df.describe().round(3) . Sum values of each object. . df.sum() . Median value of each object. . df.median() . Quantiles of each object. . df.quantile([0.25,0.75]) . Minimum value in each object . df.min() . Maximum value in each object. . df.max() . Mean value of each object. . df.mean() . Variance of each object. . df.var() . Standard deviation of each object . df.std() . Count non-NA/null values of each object. . df.count() . Feature Engineering . One hot encode columns . pd.get_dummies(df) . Interpolate missing values in time series data . df.interpolate() . Fill null values . df[&#39;column to find null values&#39;].fillna(value=df[&#39;column with null values&#39;].median(), inplace=True) . Data Visulations . Column distributions . df_nona = df.dropna(axis=0, how=&#39;any&#39;, subset=[&#39;list of columns to subset&#39;]) ax_list = df.hist(bins=25, layout=(4,4), figsize=(15,15)) df_nona.describe().round(3) . Corrleation heatmap . CATEGORICAL_FEATURES = [&#39;list of columns with categorical features&#39;] corr = df[CATEGORICAL_FEATURES].corr() mask = np.triu(np.ones_like(corr, dtype=np.bool)) plt.figure(figsize=(20,10)) cmap = sns.diverging_palette(230, 20, as_cmap=True) sns.heatmap(corr,mask=mask,cmap=cmap,annot=True) . Calendar heatmap . flights = sns.load_dataset(&quot;flights&quot;) flights = flights.pivot(&quot;month&quot;, &quot;year&quot;, &quot;passengers&quot;) sns.heatmap(flights, annot=True, fmt=&quot;d&quot;) plt.show() . Save figure . plt.savefig(&#39;filename.ext&#39;) .",
            "url": "https://andrewryanx.github.io/site/python/2021/01/29/py-cheatsheet.html",
            "relUrl": "/python/2021/01/29/py-cheatsheet.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Data Science Glossary",
            "content": "Data Science Glossary .",
            "url": "https://andrewryanx.github.io/site/statistics/ml/2021/01/29/glossary.html",
            "relUrl": "/statistics/ml/2021/01/29/glossary.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Print Prime Numbers",
            "content": "HackerRank - SQL: Print Prime Numbers . Problem: . Write a query to print all prime numbers less than or equal to 1000. Print your result on a single line, and use the ampersand (&amp;) character as your separator (instead of a space). . For example, the output for all prime numbers would be less than or equal to 10: . 2&amp;3&amp;5&amp;7 . Solution: . SELECT GROUP_CONCAT(NUMB SEPARATOR &#39;&amp;&#39;) FROM ( SELECT @num:=@num+1 as NUMB FROM information_schema.tables t1, information_schema.tables t2, (SELECT @num:=1) tmp ) tempNum WHERE NUMB&lt;=1000 AND NOT EXISTS( SELECT * FROM ( SELECT @nu:=@nu+1 as NUMA FROM information_schema.tables t1, information_schema.tables t2, (SELECT @nu:=1) tmp1 LIMIT 1000 ) tatata WHERE FLOOR(NUMB/NUMA)=(NUMB/NUMA) AND NUMA&lt;NUMB AND NUMA&gt;1 ) .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/print-prime-numbers.html",
            "relUrl": "/hackerrank/sql/2021/01/29/print-prime-numbers.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Draw the Triangle 2",
            "content": "HackerRank - SQL: Draw the Triangle 2 . Problem: . P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5): . * * * * * * * * * * * * * * * . Write a query to print the pattern P(20). . Solution: . SET @number = 0; SELECT REPEAT(&#39;* &#39;, @number := @number+1) FROM information_schema.tables LIMIT 20; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/draw-the-triangle-2.html",
            "relUrl": "/hackerrank/sql/2021/01/29/draw-the-triangle-2.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "Draw the Triangle 1",
            "content": "HackerRank - SQL: Draw the Triangle 1 . Problem: . P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5): . * * * * * * * * * * * * * * * . Write a query to print the pattern P(20). . Solution: . SET @number = 21; SELECT REPEAT(&#39;* &#39;, @number := @number - 1) FROM information_schema.tables LIMIT 20; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/draw-the-triangle-1.html",
            "relUrl": "/hackerrank/sql/2021/01/29/draw-the-triangle-1.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "15 Days of Learning SQL",
            "content": "HackerRank - SQL: 15 Days of Learning SQL . Problem: . Julia conducted a 15 days of learning SQL contest. The start date of the contest was March 01, 2016 and the end date was March 15, 2016. . Write a query to print total number of unique hackers who made at least submission each day (starting on the first day of the contest), and find the hacker_id and name of the hacker who made maximum number of submissions each day. If more than one such hacker has a maximum number of submissions, print the lowest hacker_id. The query should print this information for each day of the contest, sorted by the date. . Solution: . SELECT SUBMISSION_DATE, (SELECT COUNT(DISTINCT HACKER_ID) FROM SUBMISSIONS S2 WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE AND (SELECT COUNT(DISTINCT S3.SUBMISSION_DATE) FROM SUBMISSIONS S3 WHERE S3.HACKER_ID = S2.HACKER_ID AND S3.SUBMISSION_DATE &lt; S1.SUBMISSION_DATE) = DATEDIFF(S1.SUBMISSION_DATE , &#39;2016-03-01&#39;)), (SELECT HACKER_ID FROM SUBMISSIONS S2 WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE GROUP BY HACKER_ID ORDER BY COUNT(SUBMISSION_ID) DESC, HACKER_ID LIMIT 1) AS TMP, (SELECT NAME FROM HACKERS WHERE HACKER_ID = TMP) FROM (SELECT DISTINCT SUBMISSION_DATE FROM SUBMISSIONS) S1 GROUP BY SUBMISSION_DATE; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/15-days-of-learning-sql.html",
            "relUrl": "/hackerrank/sql/2021/01/29/15-days-of-learning-sql.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "Interviews",
            "content": "HackerRank - SQL: Interviews . Problem: . Samantha interviews many candidates from different colleges using coding challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are 0. . Note: A specific contest can be used to screen candidates at more than one college, but each college only holds 1 screening contest. . Solution: . SELECT con.contest_id, con.hacker_id, con.name, SUM(sg.total_submissions), SUM(sg.total_accepted_submissions), SUM(vg.total_views), SUM(vg.total_unique_views) FROM Contests AS con JOIN Colleges AS col ON con.contest_id = col.contest_id JOIN Challenges AS cha ON cha.college_id = col.college_id LEFT JOIN (SELECT ss.challenge_id, SUM(ss.total_submissions) AS total_submissions, SUM(ss.total_accepted_submissions) AS total_accepted_submissions FROM Submission_Stats AS ss GROUP BY ss.challenge_id) AS sg ON cha.challenge_id = sg.challenge_id LEFT JOIN (SELECT vs.challenge_id, SUM(vs.total_views) AS total_views, SUM(vs.total_unique_views) AS total_unique_views FROM View_Stats AS vs GROUP BY vs.challenge_id) AS vg ON cha.challenge_id = vg.challenge_id GROUP BY con.contest_id, con.hacker_id, con.name HAVING SUM(sg.total_submissions) + SUM(sg.total_accepted_submissions) + SUM(vg.total_views) + SUM(vg.total_unique_views) &gt; 0 ORDER BY con.contest_id; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/interviews.html",
            "relUrl": "/hackerrank/sql/2021/01/29/interviews.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "Symmetric Pairs",
            "content": "HackerRank - SQL: Symmetric Pairs . Problem: . You are given a table, Functions, containing two columns: X and Y. . Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1. . Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 ≤ Y1. . Solution: . SELECT f1.X, f1.Y FROM Functions AS f1 WHERE f1.X = f1.Y AND (SELECT COUNT(*) FROM Functions WHERE X = f1.X AND Y = f1.X) &gt; 1 UNION SELECT f1.X, f1.Y FROM Functions AS f1, Functions AS f2 WHERE f1.X &lt;&gt; f1.Y AND f1.X = f2.Y AND f1.Y = f2.X AND f1.X &lt; f2.X ORDER BY X; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/symmetric-pairs.html",
            "relUrl": "/hackerrank/sql/2021/01/29/symmetric-pairs.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "Placements",
            "content": "HackerRank - SQL: Placements . Problem: . You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month). . Write a query to output the names of those students whose best friends got offered a higher salary than them. Names must be ordered by the salary amount offered to the best friends. It is guaranteed that no two students got same salary offer. . Solution: . SELECT s.Name FROM Students AS s JOIN Packages AS sp ON s.ID = sp.ID JOIN Friends AS f ON s.ID = f.ID JOIN Packages AS fp ON f.Friend_ID = fp.ID WHERE sp.Salary &lt; fp.Salary ORDER BY fp.Salary; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/placements.html",
            "relUrl": "/hackerrank/sql/2021/01/29/placements.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "SQL Project Planning",
            "content": "HackerRank - SQL: SQL Project Planning . Problem: . You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table. . If the End_Date of the tasks are consecutive, then they are part of the same project. Samantha is interested in finding the total number of different projects completed. . Write a query to output the start and end dates of projects listed by the number of days it took to complete the project in ascending order. If there is more than one project that have the same number of completion days, then order by the start date of the project. . Solution: . SELECT Start_Date, MIN(End_Date) FROM (SELECT Start_Date FROM Projects WHERE Start_Date NOT IN (SELECT End_Date FROM Projects)) AS s, (SELECT End_Date FROM Projects WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)) AS e WHERE Start_Date &lt; End_Date GROUP BY Start_Date ORDER BY DATEDIFF(MIN(End_Date), Start_Date), Start_Date; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/sql-project-planning.html",
            "relUrl": "/hackerrank/sql/2021/01/29/sql-project-planning.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "Contest Leaderboard",
            "content": "HackerRank - SQL: Contest Leaderboard . Problem: . Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result. . Solution: . SELECT c.hacker_id, h.name, COUNT(c.challenge_id) AS cnt FROM Hackers AS h JOIN Challenges AS c ON h.hacker_id = c.hacker_id GROUP BY c.hacker_id, h.name HAVING cnt = (SELECT COUNT(c1.challenge_id) FROM Challenges AS c1 GROUP BY c1.hacker_id ORDER BY COUNT(*) DESC LIMIT 1) OR cnt NOT IN (SELECT COUNT(c2.challenge_id) FROM Challenges AS c2 GROUP BY c2.hacker_id HAVING c2.hacker_id &lt;&gt; c.hacker_id) ORDER BY cnt DESC, c.hacker_id; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/contest-leaderboard.html",
            "relUrl": "/hackerrank/sql/2021/01/29/contest-leaderboard.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "Challenges",
            "content": "HackerRank - SQL: Challenges . Problem: . You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too! . The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of from your result. . Solution: . SELECT m.hacker_id, h.name, SUM(m.score) AS total_score FROM (SELECT hacker_id, challenge_id, MAX(score) AS score FROM Submissions GROUP BY hacker_id, challenge_id) AS m JOIN Hackers AS h ON m.hacker_id = h.hacker_id GROUP By m.hacker_id, h.name HAVING total_score &gt; 0 ORDER BY total_score DESC, m.hacker_id; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/challenges.html",
            "relUrl": "/hackerrank/sql/2021/01/29/challenges.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post20": {
            "title": "Olivander's Inventory",
            "content": "HackerRank - SQL: Olivander’s Inventory . Problem: . Harry Potter and his friends are at Ollivander’s with Ron, finally replacing Charlie’s old broken wand. . Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron’s interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age. . The following tables contain data on the wands in Ollivander’s inventory: . Wands: The id is the id of the wand, code is the code of the wand, coins_needed is the total number of gold galleons needed to buy the wand, and power denotes the quality of the wand (the higher the power, the better the wand is). | . Column Type . id | Integer | . code | Integer | . coins_needed | Integer | . power | Integer | . Wands_Property: The code is the code of the wand, age is the age of the wand, and is_evil denotes whether the wand is good for the dark arts. If the value of is_evil is 0, it means that the wand is not evil. The mapping between code and age is one-one, meaning that if there are two pairs, (code1, age1) and (code2, age2) , then (code1 =/= code2) and (age 1 =/= age2). | . Column Type . code | Integer | . age | Integer | . is_evil | Integer | . Sample Input: . Wands table: | . id code coins_needed power . 1 | 4 | 3688 | 8 | . 2 | 3 | 9365 | 3 | . 3 | 3 | 7187 | 10 | . 4 | 3 | 734 | 8 | . 5 | 1 | 6020 | 2 | . 6 | 2 | 6773 | 7 | . 7 | 3 | 9873 | 9 | . 8 | 3 | 7721 | 7 | . 9 | 1 | 1647 | 10 | . 10 | 4 | 504 | 5 | . 11 | 2 | 7587 | 5 | . 12 | 5 | 9897 | 10 | . 13 | 3 | 4651 | 8 | . 14 | 2 | 5408 | 1 | . 15 | 2 | 6018 | 7 | . 16 | 4 | 7710 | 5 | . 17 | 2 | 8798 | 7 | . 18 | 2 | 3312 | 3 | . 19 | 4 | 7651 | 6 | . 20 | 5 | 5689 | 3 | . Wands_Property Table: . code age is_evil . 4 | 45 | 0 | . 2 | 40 | 0 | . 3 | 4 | 1 | . 4 | 20 | 0 | . 5 | 17 | 0 | . Sample Output: . 9 45 1647 10 12 17 9897 10 1 20 3688 8 15 40 6018 7 19 20 7651 6 11 40 7587 5 10 20 504 5 18 40 3312 3 20 17 5689 3 5 45 6020 2 14 40 5408 1 . Solution: . SELECT id, age, m.coins_needed, m.power FROM (SELECT code, power, MIN(coins_needed) AS coins_needed FROM Wands GROUP BY code, power) AS m JOIN Wands AS w ON m.code = w.code AND m.power = w.power AND m.coins_needed = w.coins_needed JOIN Wands_Property AS p ON m.code = p.code WHERE p.is_evil = 0 ORDER BY m.power DESC, age DESC; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/ollivanders-inventory.html",
            "relUrl": "/hackerrank/sql/2021/01/29/ollivanders-inventory.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post21": {
            "title": "Top Competitors",
            "content": "HackerRank - SQL: Top Competitors . Problem: . Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id. . Input Format . The following tables contain contest data: . Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker. | . Column Type . hacker_id | Integer | . name | String | . Difficulty: The difficult_level is the level of difficulty of the challenge, and score is the score of the challenge for the difficulty | . Column Type . difficulty_level | Integer | . score | Integer | . Challenges: The challenge_id is the id of the challenge, the hacker_id is the id of the hacker who created the challenge, and difficulty_level is the level of difficulty of the challenge. | . Column Type . challenge_id | Integer | . hacker_id | Integer | . difficulty_level | String | . Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge that the submission belongs to, and score is the score of the submission. | . Column Type . submission | Integer | . hacker_id | Integer | . challenge_id | Integer | . score | Integer | . Sample Input: . Hackers Table: . hacker_id name . 5580 | Rose | . 8439 | Angela | . 27205 | Frank | . 52243 | Patrick | . 52348 | Lisa | . 57645 | Kimberly | . 77726 | Bonnie | . 83082 | Michael | . 86870 | Todd | . 90411 | Joe | . Difficulty Table: . difficulty_level score . 1 | 20 | . 2 | 30 | . 3 | 40 | . 4 | 60 | . 5 | 80 | . 6 | 100 | . 7 | 120 | . Challenges Table: . challenge_id hacker_id difficulty_level . 4810 | 77726 | 4 | . 21086 | 27205 | 1 | . 36566 | 5580 | 7 | . 66730 | 52243 | 6 | . 71055 | 52243 | 2 | . Submissions Table: . challenge_id hacker_id difficulty_level difficulty_level . 68628 | 77726 | 36566 | 30 | . 65300 | 77726 | 21089 | 10 | . 40326 | 52243 | 36566 | 77 | . 8941 | 27205 | 4810 | 4 | . 83554 | 77726 | 66730 | 30 | . 43353 | 52243 | 66730 | 0 | . 55385 | 52348 | 71055 | 20 | . 39784 | 27205 | 71055 | 23 | . 94613 | 86870 | 71055 | 30 | . 45788 | 52348 | 36566 | 0 | . 93058 | 86870 | 36566 | 30 | . 7344 | 8439 | 66730 | 92 | . 2721 | 8439 | 4810 | 36 | . 523 | 5580 | 71055 | 4 | . 49105 | 52348 | 66730 | 0 | . 55877 | 57645 | 66730 | 80 | . 38355 | 27205 | 66730 | 35 | . 3924 | 8439 | 36566 | 80 | . 97397 | 90411 | 66730 | 100 | . 84162 | 83082 | 4810 | 40 | . 97431 | 90411 | 71055 | 30 | . Sample Output: 90411 Joe . Solution: . SELECT h.hacker_id, h.name FROM Submissions AS s JOIN Hackers AS h ON s.hacker_id = h.hacker_id JOIN Challenges AS c ON s.challenge_id = c.challenge_id JOIN Difficulty AS d ON c.difficulty_level = d.difficulty_level WHERE s.score = d.score GROUP BY h.hacker_id, h.name HAVING COUNT(*)&gt;1 ORDER BY COUNT(*) DESC, h.hacker_id; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/top-competitors.html",
            "relUrl": "/hackerrank/sql/2021/01/29/top-competitors.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post22": {
            "title": "The Report",
            "content": "HackerRank - SQL: The Report . Problem: . You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks. . The STUDENTS table is described as follows: . Column Type . ID | Integer | . Name | String | . Marks | Integer | . Grades contains the following data: . Grade Min_Mark Max_Mark . 1 | 0 | 9 | . 2 | 10 | 19 | . 3 | 20 | 29 | . 4 | 30 | 39 | . 5 | 40 | 49 | . 6 | 50 | 59 | . 7 | 60 | 69 | . 8 | 70 | 79 | . 9 | 80 | 89 | . 10 | 90 | 100 | . Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn’t want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade – i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use “NULL” as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order. . Write a query to help Eve. . Sample Input: . ID Name Marks . 1 | Julia | 88 | . 2 | Samantha | 68 | . 3 | Maria | 99 | . 4 | Scarlet | 78 | . 5 | Ashley | 63 | . 6 | Jane | 81 | . Sample Output . Maria 10 99 Jane 9 81 Julia 9 88 Scarlet 8 78 NULL 7 63 NULL 7 6 . Note . Print NULL as the name if the grade is less than 8. . Explanation . Consider the following table with the grades assigned to the students: | ID | Name | Marks | Grade | | ———– | ———– | ———– | ———– | | 1 | Julia | 88 | 9 | | 2 | Samantha | 68 | 7 | | 3 | Maria | 99 | 10 | | 4 | Scarlet | 78 | 8 | | 5 | Ashley | 63 | 7 | | 6 | Jane | 81 | 9 | . So, the following students got 8, 9 or 10 grades: . Maria (grade 10) | Jane (grade 9) | Julia (grade 9) | Scarlet (grade 8) | . Solution: . SELECT IF(g.Grade&lt;8, NULL, s.Name), g.Grade, s.Marks FROM Students AS s JOIN Grades AS g ON s.Marks BETWEEN g.Min_Mark AND g.Max_Mark ORDER BY g.Grade DESC, s.Name, s.Marks; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/29/the-report.html",
            "relUrl": "/hackerrank/sql/2021/01/29/the-report.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post23": {
            "title": "Average Population of Each Continent",
            "content": "HackerRank - SQL: Average Population of Each Continent . Problem: . Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer. . Note: CITY.CountryCode and COUNTRY.Code are matching key columns. . The CITY and COUNTRY tables are described as follows: . CITY | . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . COUNTRY | . Field Type . CODE | VARCHAR2(3) | . NAME | VARCHAR2(44) | . CONTINENT | VARCHAR2(13) | . REGION | VARCHAR2(25) | . SURFACEAREA | NUMBER | . INDEPYEAR | VARCHAR2(5) | . POPULATION | NUMBER | . LIFEEXPECTANCY | VARCHAR2(4) | . GNP | NUMBER | . GNPOLD | VARCHAR2(9) | . LOCALNAME | VARCHAR2(44) | . GOVERNFORM | VARCHAR2(44) | . HEADOFSTATE | VARCHAR2(32) | . CAPITAL | VARCHAR2(4) | . CODE2 | VARCHAR2(2) | . Solution: . SELECT o.CONTINENT, FLOOR(AVG(i.POPULATION)) FROM CITY AS i JOIN COUNTRY AS o ON i.COUNTRYCODE=o.CODE GROUP BY o.CONTINENT; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/28/average-population-continent.html",
            "relUrl": "/hackerrank/sql/2021/01/28/average-population-continent.html",
            "date": " • Jan 28, 2021"
        }
        
    
  
    
        ,"post24": {
            "title": "African Cities",
            "content": "HackerRank - SQL: African Cities . Problem: . Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is ‘Africa’. . Note: CITY.CountryCode and COUNTRY.Code are matching key columns. . The CITY and COUNTRY tables are described as follows: . CITY | . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . COUNTRY | . Field Type . CODE | VARCHAR2(3) | . NAME | VARCHAR2(44) | . CONTINENT | VARCHAR2(13) | . REGION | VARCHAR2(25) | . SURFACEAREA | NUMBER | . INDEPYEAR | VARCHAR2(5) | . POPULATION | NUMBER | . LIFEEXPECTANCY | VARCHAR2(4) | . GNP | NUMBER | . GNPOLD | VARCHAR2(9) | . LOCALNAME | VARCHAR2(44) | . GOVERNFORM | VARCHAR2(44) | . HEADOFSTATE | VARCHAR2(32) | . CAPITAL | VARCHAR2(4) | . CODE2 | VARCHAR2(2) | . Solution: . SELECT i.NAME FROM CITY AS i JOIN COUNTRY AS o ON i.COUNTRYCODE=o.CODE WHERE o.CONTINENT=&#39;Africa&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/28/african-cities.html",
            "relUrl": "/hackerrank/sql/2021/01/28/african-cities.html",
            "date": " • Jan 28, 2021"
        }
        
    
  
    
        ,"post25": {
            "title": "Asian Population",
            "content": "HackerRank - SQL: Asian Population . Problem: . Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is ‘Asia’. . Note: CITY.CountryCode and COUNTRY.Code are matching key columns. . The CITY and COUNTRY tables are described as follows: . CITY | . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . COUNTRY | . Field Type . CODE | VARCHAR2(3) | . NAME | VARCHAR2(44) | . CONTINENT | VARCHAR2(13) | . REGION | VARCHAR2(25) | . SURFACEAREA | NUMBER | . INDEPYEAR | VARCHAR2(5) | . POPULATION | NUMBER | . LIFEEXPECTANCY | VARCHAR2(4) | . GNP | NUMBER | . GNPOLD | VARCHAR2(9) | . LOCALNAME | VARCHAR2(44) | . GOVERNFORM | VARCHAR2(44) | . HEADOFSTATE | VARCHAR2(32) | . CAPITAL | VARCHAR2(4) | . CODE2 | VARCHAR2(2) | . Solution: . SELECT SUM(i.POPULATION) FROM CITY AS i JOIN COUNTRY AS o ON i.COUNTRYCODE=o.CODE WHERE o.CONTINENT=&#39;Asia&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/28/asian-population.html",
            "relUrl": "/hackerrank/sql/2021/01/28/asian-population.html",
            "date": " • Jan 28, 2021"
        }
        
    
  
    
        ,"post26": {
            "title": "Top Earners",
            "content": "HackerRank - SQL: Top Earners . Problem: . We define an employee’s total earnings to be their monthly salary * months worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as 2 space-separated integers. . Input Format . The Employee table containing employee data for a company is described as follows: . Column Type . employee_id | Integer | . name | String | . months | Integer | . salary | Integer | . where employee_id is an employee’s ID number, name is their name, months is the total number of months they’ve been working for the company, and salary is the their monthly salary. . Sample Input . employee_id name months salary . 12228 | Rose | 15 | 1968 | . 33645 | Angela | 1 | 3443 | . 45692 | Frank | 17 | 1608 | . 56118 | Patrick | 7 | 1345 | . 59725 | Lisa | 11 | 2330 | . 74197 | Kimberly | 16 | 4372 | . 78454 | Bonnie | 8 | 1771 | . 83565 | Michael | 6 | 2017 | . 98607 | Todd | 2 | 3396 | . 99989 | Joe | 9 | 3573 | . Sample Output . 69952 1 . Explanation . employee_id name months salary earnings . 12228 | Rose | 15 | 1968 | 29520 | . 33645 | Angela | 1 | 3443 | 3443 | . 45692 | Frank | 17 | 1608 | 27336 | . 56118 | Patrick | 7 | 1345 | 9415 | . 59725 | Lisa | 11 | 2330 | 25630 | . 74197 | Kimberly | 16 | 4372 | 69952 | . 78454 | Bonnie | 8 | 1771 | 14168 | . 83565 | Michael | 6 | 2017 | 12102 | . 98607 | Todd | 2 | 3396 | 16980 | . 99989 | Joe | 9 | 3573 | 32157 | . The maximum earnings value is 69952. The only employee with earnings = 69952 is Kimberly, so we print the maximum earnings value (69952) and a count of the number of employees who have earned 69952 (which is 1) as two space-separated values. . Solution: . SELECT (months*salary) as earnings, COUNT(*) FROM Employee GROUP BY earnings ORDER BY earnings DESC LIMIT 1; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/28/top-earners.html",
            "relUrl": "/hackerrank/sql/2021/01/28/top-earners.html",
            "date": " • Jan 28, 2021"
        }
        
    
  
    
        ,"post27": {
            "title": "The Blunder",
            "content": "HackerRank - SQL: The Blunder . Problem: . Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard’s 0 key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), and the actual average salary. . Write a query calculating the amount of error (i.e.: actual-miscalculated average monthly salaries), and round it up to the next integer. . The EMPLOYEES table is described as follows: . Column Type . ID | Integer | . Name | String | . Salary | Integer | . Note: Salary is measured in dollars per month and its value is &lt;105 . ID Name Salary . 1 | Kristeen | 1420 | . 2 | Ashley | 2006 | . 3 | Julia | 2210 | . 4 | Maria | 3000 | . Sample Output . **Explanation** The table below shows the salaries without zeroes as they were entered by Samantha: | ID | Name | Salary | |-- | -- | -- | | 1 | Kristeen | 142 | | 2 | Ashley | 26 | | 3 | Julia | 221 | | 4 | Maria | 3 | ## Solution: sql SELECT CEIL(AVG(Salary) - AVG(REPLACE(Salary, &#39;0&#39;, &#39;&#39;))) FROM EMPLOYEES; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/the-blunder.html",
            "relUrl": "/hackerrank/sql/2021/01/27/the-blunder.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post28": {
            "title": "Population Density Difference",
            "content": "HackerRank - SQL: Population Density Difference . Problem: . Query the difference between the maximum and minimum populations in CITY. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT MAX(POPULATION) - MIN(POPULATION) FROM CITY; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/population-density-difference.html",
            "relUrl": "/hackerrank/sql/2021/01/27/population-density-difference.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post29": {
            "title": "Japan Population",
            "content": "HackerRank - SQL: Japan Population . Problem: . Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT SUM(POPULATION) FROM CITY WHERE COUNTRYCODE = &#39;JPN&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/jpn-population.html",
            "relUrl": "/hackerrank/sql/2021/01/27/jpn-population.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post30": {
            "title": "Average Population",
            "content": "HackerRank - SQL: Average Population . Problem: . Query the average population for all cities in CITY, rounded down to the nearest integer. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT ROUND(AVG(POPULATION)) FROM CITY; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/average-population.html",
            "relUrl": "/hackerrank/sql/2021/01/27/average-population.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post31": {
            "title": "Revising Aggregations - Averages",
            "content": "HackerRank - SQL: Revising Aggregations - Averages . Problem: . Query the total population of all cities in CITY where District is **California. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT AVG(POPULATION) FROM CITY WHERE DISTRICT = &#39;California&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/revising-aggregations-averages.html",
            "relUrl": "/hackerrank/sql/2021/01/27/revising-aggregations-averages.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post32": {
            "title": "Revising Aggregations - The Sum Function",
            "content": "HackerRank - SQL: Revising Aggregations - The Sum Function . Problem: . Query the total population of all cities in CITY where District is California. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT SUM(POPULATION) FROM CITY WHERE DISTRICT = &#39;California&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/revising-aggregations-sum.html",
            "relUrl": "/hackerrank/sql/2021/01/27/revising-aggregations-sum.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post33": {
            "title": "Revising Aggregations - The Count Function",
            "content": "HackerRank - SQL: Revising Aggregations - The Count Function . Problem: . Query a count of the number of cities in CITY having a Population larger than 100,000. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT COUNT(ID) FROM CITY WHERE POPULATION &gt; 100000; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/revising-aggregations-count.html",
            "relUrl": "/hackerrank/sql/2021/01/27/revising-aggregations-count.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post34": {
            "title": "New Companies",
            "content": "HackerRank - SQL: New Companies . Problem: . Amber’s conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: . Founder | Lead Manager | Senior Manager | Manager | Employee | Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code. . Note: . The tables may contain duplicate records. The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2. . The following tables contain company data: . Company: The company_code is the code of the company and founder is the founder of the company. | . Column Type . company_code | String | . founder | String | . Lead_Manager: The lead_manager_code is the code of the lead manager, and the company_code is the code of the working company | . Column Type . lead_manager_code | String | . company_code | String | . Senior_Manager: The senior_manager_code is the code of the senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. | . Column Type . senior_manager_code | String | . lead_manager_code | String | . company_code | String | . Manager: The manager_code is the code of the manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. | . Column Type . manager_code | String | . senior_manager_code | String | . lead_manager_code | String | . company_code | String | . Employee: The employee_code is the code of the employee, the manager_code is the code of its manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. | . Column Type . employee_code | String | . manager_code | String | . senior_manager_code | String | . lead_manager_code | String | . company_code | String | . Sample Input: . Company Table: . company_code founder . C1 | Monica | . C2 | Samantha | . Lead_Manager Table: . lead_manager_code company_code . LM1 | C1 | . LM2 | C2 | . Senior_Manager Table: . senior_manager_code lead_manager_code company_code . SM1 | LM1 | C1 | . SM2 | LM1 | C1 | . SM3 | LM2 | C2 | . Manager Table: . manager_code senior_manager_code lead_manager_code company_code . M1 | SM1 | LM1 | C1 | . M2 | SM3 | LM2 | C2 | . M3 | SM3 | LM2 | C2 | . Employee Table: . employee_code manager_code senior_manager_code lead_manager_code company_code . E1 | M1 | SM1 | LM1 | C1 | . E2 | M1 | SM1 | LM1 | C1 | . E3 | M2 | SM3 | LM2 | C2 | . E4 | M3 | SM3 | LM2 | C2 | . Sample Output: . C1 Monika 1 2 1 2 C2 Samantha 1 1 2 2 . Explanation: . In company C1, the only lead manager is LM1. There are two senior managers, SM1 and SM2, under LM1. There is one manager, M1, under senior manager SM1. There are two employees, E1 and E2, under manager M1. . In company C2, the only lead manager is LM2. There is one senior manager, SM3, under LM2. There are two managers, M2 and M3, under senior manager SM3. There is one employee, E3, under manager M2, and another employee, E4, under manager, M3. . Solution: . SELECT c.company_code, c.founder, COUNT(DISTINCT l.lead_manager_code), COUNT(DISTINCT s.senior_manager_code), COUNT(DISTINCT m.manager_code), COUNT(DISTINCT e.employee_code) FROM Company c, Lead_Manager l, Senior_Manager s, Manager m, Employee e WHERE c.company_code = l.company_code AND l.lead_manager_code = s.lead_manager_code AND s.senior_manager_code = m.senior_manager_code AND m.manager_code = e.manager_code GROUP BY c.company_code, c.founder ORDER BY c.company_code; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/new-companies.html",
            "relUrl": "/hackerrank/sql/2021/01/27/new-companies.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post35": {
            "title": "The PADS",
            "content": "HackerRank - SQL: The PADS . Problem: . Generate the following two result sets: . Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S). Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: . There are a total of [occupation_count] [occupation]s. . where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically. . Note: There will be at least two entries in the table for each type of occupation. . The OCCUPATIONS table is described as follows: . Column Type . Name | String | . Occupation | String | . Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor. . An OCCUPATIONS table that contains the following records: . Name Occupation . Samantha | Doctor | . Julia | Actor | . Maria | Actor | . Meer | Singer | . Ashley | Professor | . Ketty | Professor | . Christeen | Professor | . Jane | Actor | . Jenny | Doctor | . Priya | Singer | . Sample Output: . Ashely(P) Christeen(P) Jane(A) Jenny(D) Julia(A) Ketty(P) Maria(A) Meera(S) Priya(S) Samantha(D) There are a total of 2 doctors. There are a total of 2 singers. There are a total of 3 actors. There are a total of 3 professors. . Solution: . SELECT CONCAT(Name, &#39;(&#39;, LEFT(Occupation,1),&#39;)&#39;) FROM OCCUPATIONS ORDER BY Name; SELECT CONCAT(&#39;There are a total of &#39;, COUNT(Occupation), &#39; &#39;, LOWER(Occupation), &#39;s.&#39;) FROM OCCUPATIONS GROUP BY Occupation ORDER BY COUNT(Occupation), Occupation; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/the-pads.html",
            "relUrl": "/hackerrank/sql/2021/01/27/the-pads.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post36": {
            "title": "Binary Tree Nodes",
            "content": "HackerRank - SQL: Binary Tree Nodes . Problem: . You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N. . Column Type . N | Integer | . P | String | . Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node: . Root: If node is root node. | Leaf: If node is leaf node. | Inner: If node is neither root nor leaf node. | . Sample Input: . N P . 1 | 2 | . 3 | 2 | . 6 | 8 | . 9 | 8 | . 2 | 5 | . 8 | 5 | . 5 | null | . Sample Output: . 1 Leaf 2 Inner 3 Leaf 5 Root 6 Leaf 8 Inner 9 Leaf . . Solution: . SELECT N, IF(P IS NULL, &#39;Root&#39;, IF((SELECT COUNT(*) FROM BST WHERE P=B.N)&gt;0, &#39;Inner&#39;, &#39;Leaf&#39;)) FROM BST AS B ORDER BY N; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/binary-tree-nodes.html",
            "relUrl": "/hackerrank/sql/2021/01/27/binary-tree-nodes.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post37": {
            "title": "Occupations",
            "content": "HackerRank - SQL: Occupations . Problem: . Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively. . Note: Print NULL when there are no more names corresponding to an occupation. . The OCCUPATIONS table is described as follows: . Column Type . Name | String | . Occupation | String | . Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor. . An OCCUPATIONS table that contains the following records: . Name Occupation . Samantha | Doctor | . Julia | Actor | . Maria | Actor | . Meer | Singer | . Ashley | Professor | . Ketty | Professor | . Christeen | Professor | . Jane | Actor | . Jenny | Doctor | . Priya | Singer | . Sample Output: . Jenny Ashley Meera Jane Samantha Christeen Priya Julia NULL Ketty NULL Maria . Explanation . The first column is an alphabetically ordered list of Doctor names. The second column is an alphabetically ordered list of Professor names. The third column is an alphabetically ordered list of Singer names. The fourth column is an alphabetically ordered list of Actor names. The empty cell data for columns with less than the maximum number of names per occupation (in this case, the Professor and Actor columns) are filled with NULL values. . Solution: . SET @r1=0, @r2=0, @r3 =0, @r4=0; SELECT MIN(Doctor), MIN(Professor), MIN(Singer), MIN(Actor) FROM (SELECT CASE Occupation WHEN &#39;Doctor&#39; THEN @r1:=@r1+1 WHEN &#39;Professor&#39; THEN @r2:=@r2+1 WHEN &#39;Singer&#39; THEN @r3:=@r3+1 WHEN &#39;Actor&#39; THEN @r4:=@r4+1 END AS RowLine, CASE WHEN Occupation = &#39;Doctor&#39; THEN Name END AS Doctor, CASE WHEN Occupation = &#39;Professor&#39; THEN Name END AS Professor, CASE WHEN Occupation = &#39;Singer&#39; THEN Name END AS Singer, CASE WHEN Occupation = &#39;Actor&#39; THEN Name END AS Actor FROM OCCUPATIONS ORDER BY Name) AS t GROUP BY RowLine; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/occupations.html",
            "relUrl": "/hackerrank/sql/2021/01/27/occupations.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post38": {
            "title": "Type of Triangle",
            "content": "HackerRank - SQL: Type of Triangle . Problem: . Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table: . Equilateral: It’s a triangle with 3 sides of equal length. | Isosceles: It’s a triangle with 2 sides of equal length. | Scalene: It’s a triangle with 3 sides of differing lengths. | Not A Triangle: The given values of A, B, and C don’t form a triangle. | . The TRIANGLES table is described as follows: . Column Type . A | Integer | . B | String | . B | Integer | . Each row in the table denotes the lengths of each of a triangle’s three sides. . Sample Input: . A B C . 20 | 20 | 23 | . 20 | 20 | 20 | . 20 | 21 | 22 | . 13 | 14 | 30 | . Sample Output: . Isosceles Equilateral Scalene Not A Triangle . Solution: . SELECT IF(A+B&gt;C AND A+C&gt;B AND B+C&gt;A, IF(A=B AND B=C, &#39;Equilateral&#39;, IF(A=B OR B=C OR A=C, &#39;Isosceles&#39;, &#39;Scalene&#39;)), &#39;Not A Triangle&#39;) FROM TRIANGLES; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/type-of-triangle.html",
            "relUrl": "/hackerrank/sql/2021/01/27/type-of-triangle.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post39": {
            "title": "Higher Than 75 Marks",
            "content": "HackerRank - SQL: Higher Than 75 Marks . Problem: . Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID. . The STUDENTS table is described as follows: . Column Type . ID | Integer | . NAME | String | . Marks | Integer | . The Name column only contains uppercase (A-Z) and lowercase (a-z) letters. . Sample Input: . Column Type Marks . 1 | Ashley | 81 | . 2 | Samantha | 75 | . 3 | Julia | 76 | . 4 | Belvet | 84 | . Sample Output: . Ashley Julia Belvet . Solution: . SELECT Name FROM STUDENTS WHERE Marks &gt; 75 ORDER BY RIGHT(Name, 3), ID; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/27/higher-than-75.html",
            "relUrl": "/hackerrank/sql/2021/01/27/higher-than-75.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post40": {
            "title": "Employee Salaries",
            "content": "HackerRank - SQL: Employee Salaries . Problem: . Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id. . Input Format . The Employee table containing employee data for a company is described as follows: . Column Type . employee_id | Integer | . name | string | . months | Integer | . salary | Integer | . where employee_id is an employee’s ID number, name is their name, months is the total number of months they’ve been working for the company, and salary is their monthly salary. . Sample Input . employee_id name months salary . 12228 | Rose | 15 | 1968 | . 33645 | Angela | 1 | 3443 | . 45692 | Frank | 17 | 1608 | . 56118 | Patrick | 7 | 1345 | . 59725 | Lisa | 11 | 2330 | . 74197 | Kimberly | 16 | 4372 | . 78454 | Bonnie | 8 | 1771 | . 83565 | Michael | 6 | 2017 | . 98607 | Todd | 2 | 3396 | . 99989 | Joe | 9 | 3573 | . Sample Output . Angela Michael Todd Joe . Explanation . Angela has been an employee for 1 month and earns $3443 per month. . Michael has been an employee for 6 months and earns $2017 per month. . Todd has been an employee for 5 months and earns $3396 per month. . Joe has been an employee for 9 months and earns $3573 per month. . We order our output by ascending employee_id. . Solution: . SELECT name FROM Employee WHERE salary &gt; 2000 AND months &lt; 10 ORDER BY employee_id; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/employee-salaries.html",
            "relUrl": "/hackerrank/sql/2021/01/26/employee-salaries.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post41": {
            "title": "Employee Names",
            "content": "HackerRank - SQL: Employee Names . Problem: . Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order. . Input Format . The Employee table containing employee data for a company is described as follows: . Column Type . employee_id | Integer | . name | String | . months | Integer | . salary | Integer | . where employee_id is an employee’s ID number, name is their name, months is the total number of months they’ve been working for the company, and salary is their monthly salary. . Sample Input . employee_id name months salary . 12228 | Rose | 15 | 1968 | . 33645 | Angela | 1 | 3443 | . 45692 | Frank | 17 | 1608 | . 56118 | Patrick | 7 | 1345 | . 59725 | Lisa | 11 | 2330 | . 74197 | Kimberly | 16 | 4372 | . 78454 | Bonnie | 8 | 1771 | . 83565 | Michael | 6 | 2017 | . 98607 | Todd | 2 | 3396 | . 99989 | Joe | 9 | 3573 | . Sample Output . Angela Bonnie Frank Joe Kimberly Lisa Michael Patrick Rose Todd . Solution: . SELECT name FROM Employee ORDER BY name ASC; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/employee-names.html",
            "relUrl": "/hackerrank/sql/2021/01/26/employee-names.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post42": {
            "title": "Weather Observation Station 20",
            "content": "HackerRank - SQL: Weather Observation Station 20 . Problem: . A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SET @rowIndex := -1; SELECT ROUND(AVG(t.LAT_N), 4) FROM ( SELECT @rowIndex := @rowIndex+1 AS rowIndex, s.LAT_N FROM STATION AS s ORDER BY s.LAT_N ) AS t WHERE t.rowIndex IN (FLOOR(@rowIndex / 2), CEIL(@rowIndex / 2)); .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-20.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-20.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post43": {
            "title": "Weather Observation Station 19",
            "content": "HackerRank - SQL: Weather Observation Station 19 . Problem: . Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION. . Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT ROUND(SQRT(POW(MIN(LAT_N)-MAX(LAT_N), 2) + POW(MIN(LONG_W)-MAX(LONG_W), 2)), 4) FROM STATION; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-19.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-19.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post44": {
            "title": "Weather Observation Station 18",
            "content": "HackerRank - SQL: Weather Observation Station 18 . Problem: . Consider P1(a,b) and P2(a,b) to be two points on a 2D plane. . a happens to equal the minimum value in Northern Latitude (LAT_N in STATION). | b happens to equal the minimum value in Western Longitude (LONG_W in STATION). | c happens to equal the maximum value in Northern Latitude (LAT_N in STATION). | d happens to equal the maximum value in Western Longitude (LONG_W in STATION). | . Query the Manhattan Distance between points P1 and P@ and round it to a scale of 4 decimal places. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT ROUND(ABS(MIN(LAT_N)-MAX(LAT_N)) + ABS(MIN(LONG_W)-MAX(LONG_W)), 4) FROM STATION; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-18.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-18.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post45": {
            "title": "Weather Observation Station 17",
            "content": "HackerRank - SQL: Weather Observation Station 17 . Problem: . Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. Round your answer to 4 decimal places. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT ROUND(LONG_W, 4) FROM STATION WHERE LAT_N &gt; 38.7780 ORDER BY LAT_N LIMIT 1; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-17.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-17.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post46": {
            "title": "Weather Observation Station 16",
            "content": "HackerRank - SQL: Weather Observation Station 16 . Problem: . Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT ROUND(MIN(LAT_N), 4) FROM STATION WHERE LAT_N &gt; 38.7780; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-16.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-16.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post47": {
            "title": "Weather Observation Station 15",
            "content": "HackerRank - SQL: Weather Observation Station 15 . Problem: . Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT ROUND(LONG_W, 4) FROM STATION WHERE LAT_N &lt; 137.2345 ORDER BY LAT_N DESC LIMIT 1; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-15.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-15.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post48": {
            "title": "Weather Observation Station 14",
            "content": "HackerRank - SQL: Weather Observation Station 14 . Problem: . Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT ROUND(MAX(LAT_N), 4) FROM STATION WHERE LAT_N &lt; 137.2345; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-14.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-14.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post49": {
            "title": "Weather Observation Station 13",
            "content": "HackerRank - SQL: Weather Observation Station 13 . Problem: . Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345 . Truncate your answer to 4 decimal places. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT ROUND(SUM(LAT_N), 4) FROM STATION WHERE LAT_N &gt; 38.7880 AND LAT_N &lt; 137.2345; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-13.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-13.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post50": {
            "title": "Weather Observation Station 12",
            "content": "HackerRank - SQL: Weather Observation Station 12 . Problem: . Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP &#39;^[^aeiou].*[^aeiou]$&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-12.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-12.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post51": {
            "title": "Weather Observation Station 11",
            "content": "HackerRank - SQL: Weather Observation Station 11 . Problem: . Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP &#39;^[^aeiou]|[^aeiou]$&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-11.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-11.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post52": {
            "title": "Weather Observation Station 10",
            "content": "HackerRank - SQL: Weather Observation Station 10 . Problem: . Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP &#39;[^aeiou]$&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-10.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-10.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post53": {
            "title": "Weather Observation Station 9",
            "content": "HackerRank - SQL: Weather Observation Station 9 . Problem: . Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP &#39;^[^aeiou]&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-9.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-9.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post54": {
            "title": "Weather Observation Station 8",
            "content": "HackerRank - SQL: Weather Observation Station 8 . Problem: . Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP &#39;^[aeiou].*[aeiou]$&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-8.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-8.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post55": {
            "title": "Weather Observation Station 7",
            "content": "HackerRank - SQL: Weather Observation Station 7 . Problem: . Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP &#39;[aeiou]$&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-7.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-7.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post56": {
            "title": "Weather Observation Station 6",
            "content": "HackerRank - SQL: Weather Observation Station 6 . Problem: . Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP &#39;^[aeiou]&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-6.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-6.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post57": {
            "title": "Weather Observation Station 5",
            "content": "HackerRank - SQL: Weather Observation Station 5 . Problem: . Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Sample Input . For example, CITY has four entries: DEF, ABC, PQRS and WXY. . Sample Output . ABC 3 PQRS 4 Explanation . When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths 3, 3, 4, and 3. The longest name is PQRS, but there are 3 options for shortest named city. Choose ABC, because it comes first alphabetically. . Note You can write two separate queries to get the desired output. It need not be a single query. . Solution: . SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY), CITY LIMIT 1; SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-5.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-5.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post58": {
            "title": "Weather Observation Station 4",
            "content": "HackerRank - SQL: Weather Observation Station 4 . Problem: . Query all columns for a city in CITY with the ID 1661. . The CITY table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . For example, if there are three records in the table with CITY values ‘New York’, ‘New York’, ‘Bengalaru’, there are 2 different city names: ‘New York’ and ‘Bengalaru’. The query returns 1, because total number of records - number of unique city name = 3 - 2 = 1 . Solution: . SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-4.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-4.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post59": {
            "title": "Weather Observation Station 3",
            "content": "HackerRank - SQL: Weather Observation Station 3 . Problem: . Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT CITY FROM STATION WHERE (ID % 2) = 0 GROUP BY CITY; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-3.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-3.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post60": {
            "title": "Weather Observation Station 2",
            "content": "HackerRank - SQL: Weather Observation Station 2 . Problem: . Query the following two values from the STATION table: . The sum of all values in LAT_N rounded to a scale of 2 decimal places. | The sum of all values in LONG_W rounded to a scale of 2 decimal places. | The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Output Format . Your results must be in the form: . lat lon where lat is the sum of all values in LAT_N and lon is the sum of all values in LONG_W. Both results must be rounded to a scale of 2 decimal places. . Solution: . SELECT ROUND(SUM(LAT_N), 2), ROUND(SUM(LONG_W), 2) FROM STATION; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-2.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-2.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post61": {
            "title": "Weather Observation Station 5",
            "content": "HackerRank - SQL: Weather Observation Station 1 . Problem: . Query a list of CITY and STATE from the STATION table. . The STATION table is described as follows: . Field Type . ID | Number | . CITY | VARCHAR2(21) | . STATE | VARCHAR2(2) | . LAT_N | NUMBER | . LONG_W | NUMBER | . where LAT_N is the northern latitude and LONG_W is the western longitude. . Solution: . SELECT CITY,STATE FROM STATION; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/weather-observation-station-1.html",
            "relUrl": "/hackerrank/sql/2021/01/26/weather-observation-station-1.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post62": {
            "title": "Japanese Cities' Names",
            "content": "HackerRank - SQL: Japanese Cities’ Names . Problem: . Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT NAME FROM CITY WHERE COUNTRYCODE = &#39;JPN&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/jpn-city-names.html",
            "relUrl": "/hackerrank/sql/2021/01/26/jpn-city-names.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post63": {
            "title": "Select by ID",
            "content": "HackerRank - SQL: Select by ID . Problem: . Query all columns for a city in CITY with the ID 1661. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT * FROM CITY WHERE ID = 1661; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/select-by-id.html",
            "relUrl": "/hackerrank/sql/2021/01/26/select-by-id.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post64": {
            "title": "Select All",
            "content": "HackerRank - SQL: Select All . Problem: . Query all columns (attributes) for every row in the CITY table. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT * FROM CITY; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/select-all.html",
            "relUrl": "/hackerrank/sql/2021/01/26/select-all.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post65": {
            "title": "Revising the Select Query II",
            "content": "HackerRank - SQL: Revising the Select Query II . Problem: . Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT NAME FROM CITY WHERE COUNTRYCODE = &#39;USA&#39; AND POPULATION &gt; 120000; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/revising-the-select-query-2.html",
            "relUrl": "/hackerrank/sql/2021/01/26/revising-the-select-query-2.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post66": {
            "title": "Revising the Select Query I",
            "content": "HackerRank - SQL: Revising the Select Query I . Problem: . Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT * FROM CITY WHERE COUNTRYCODE = &#39;USA&#39; AND POPULATION &gt; 100000; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/2021/01/26/revising-the-select-query-1.html",
            "relUrl": "/hackerrank/sql/2021/01/26/revising-the-select-query-1.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post67": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://andrewryanx.github.io/site/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post68": {
            "title": "Japanese Cities' Attribues",
            "content": "HackerRank - SQL: Japanese Cities’ Attribues . Problem: . Query all columns for a city in CITY with the ID 1661. . The CITY table is described as follows: . Field Type . ID | Number | . NAME | VARCHAR2(17) | . COUNTRYCODE | VARCHAR2(3) | . DISTRICT | VARCHAR2(20) | . POPULATION | NUMBER | . Solution: . SELECT * FROM CITY WHERE COUNTRYCODE = &#39;JPN&#39;; .",
            "url": "https://andrewryanx.github.io/site/hackerrank/sql/0021/01/26/jpn-city-attrib.html",
            "relUrl": "/hackerrank/sql/0021/01/26/jpn-city-attrib.html",
            "date": " • Jan 26, 0021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Landing page for projects and ideas . 🔭 I’m currently working on … | 🌱 I’m currently learning … | 👯 I’m looking to collaborate on … | 🤔 I’m looking for help with … | 💬 Ask me about … | 📫 How to reach me: … | 😄 Pronouns: … | ⚡ Fun fact: … . | .",
          "url": "https://andrewryanx.github.io/site/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Projects",
          "content": ". Projects &amp; Tutorials . . Web Maps . Tweet Map . DC Potholes . .",
          "url": "https://andrewryanx.github.io/site/projects/",
          "relUrl": "/projects/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Resources",
          "content": ". Cheat Sheets . I’m beginning to put together cheat sheets for quick access to important/useful data science information! . I’ll be working on adding more to this list and proving examples. . If you see something that is incorrect or would like to add to it, feel free to reach out. . Data Science Glossary . Python Cheat Sheet . Statistics Cheat Sheet . Machine Learning Cheat Sheet . Ubuntu Cheat Sheet . . Other Resources . .",
          "url": "https://andrewryanx.github.io/site/resources/",
          "relUrl": "/resources/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Resume",
          "content": "Professional Experience . Staff Data Scientist, Maxar Technologies - Herndon, VA . January 2019 - Present . | . Geospatial Analyst/Cartographer, ActioNet, Inc. - Washington, D.C . September 2018 - January 2019 . | . Geospatial Data Scientist, Maxar Technologies - Washington, D.C. / Reston, VA . June 2016 - September 2018 . | . Intern, U.S. Department of State - Washington, D.C . March 2016 - June 2016 . | . Geospatial Analyst, Virginia Tech - Blacksburg, VA . March 2014 - June 2016 . | . . Projects . See Projects . . Skills . Programming Languages: Python, SQL . Data Science: Python, machine learning, deep learning, exploratory data analysis, descriptive statistics, data cleaning, feature engineering, data visualization, NVIDIA DIGITS, Jupyter Notebooks . Domain Expertise: Geospatial analytics, All-Source intelligence, Pattern of Life analytics, social network analysis . Misc: Ubuntu/Linux, CLI, PyCharm, VSCode, AWS EC2, AWS S3, GitHub, Jira, Confluence, Markdown, ArcGIS, QGIS . . Education . PhD., Earth Systems &amp; Geoinformation Science, George Mason University . August 2019 - Present . Relevant coursework: Deep Learning for Geoinformatics | . M.S, Geospatial Intelligence, George Mason University . August 2016 - May 2019 . Relevant coursework: Scientific Data Mining for Geoinformatics, Spatial Data Structures, GIS Algorithms, GIS Algorithms and Programming, Quantitative Methods | . B.A., Geography, Virginia Tech . August 2011 - May 2015 . . Certificates, Awards, &amp; Organizations . Elements of Data Science - AWS | Master Python for Data Science - LinkedIn Learning | Python for Data Science Essential Training 1 - LinkedIn Learning | Python for Data Science Essential Training 2 - LinkedIn Learning | Mastering Python for Data Science - LinkedIn Learning | Applied Machine Learning: Foundations - LinkedIn Learning | Applied Machine Learning: Feature Engineering - LinkedIn Learning | Applied Machine Learning: Algorithms - LinkedIn Learning | . . United States Geospatial Intelligence Foundation (USGIF) Scholarship, 2016-2017 | United States Geospatial Intelligence Foundation (USGIF) Scholarship, 2017 - 2018 | United States Geospatial Intelligence Foundation (USGIF) Scholarship, 2018 - 2019 | Certificate of Appreciation, U.S. Department of State, 2018 | Certificate of Appreciation, U.S. Department of State, 2016 | . . USGIF Machine Learning &amp; Artificial Intelligence Working Group | USGIF Young Professionals Group (YPG) | American Association of Geographers (AAG) | American Geographical Society (AGS) | Geo DC | .",
          "url": "https://andrewryanx.github.io/site/resume/",
          "relUrl": "/resume/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://andrewryanx.github.io/site/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
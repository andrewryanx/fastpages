<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://andrewryanx.github.io/site/feed.xml" rel="self" type="application/atom+xml" /><link href="https://andrewryanx.github.io/site/" rel="alternate" type="text/html" /><updated>2021-01-30T12:50:28-06:00</updated><id>https://andrewryanx.github.io/site/feed.xml</id><title type="html">Home</title><subtitle>Personal blog</subtitle><author><name>Andrew Ryan</name><email>andrrvt15@gmail.com</email></author><entry><title type="html">Ubuntu Cheat Sheet</title><link href="https://andrewryanx.github.io/site/ubuntu/linux/2021/01/29/ubuntu-cheatsheet.html" rel="alternate" type="text/html" title="Ubuntu Cheat Sheet" /><published>2021-01-29T04:04:00-06:00</published><updated>2021-01-29T04:04:00-06:00</updated><id>https://andrewryanx.github.io/site/ubuntu/linux/2021/01/29/ubuntu-cheatsheet</id><author><name>Andrew Ryan</name><email>andrrvt15@gmail.com</email></author><category term="Ubuntu" /><category term="Linux" /><summary type="html">Ubuntu Cheat Sheet</summary></entry><entry><title type="html">Machine Learning Cheat Sheet</title><link href="https://andrewryanx.github.io/site/ml/python/2021/01/29/ml-cheatsheet.html" rel="alternate" type="text/html" title="Machine Learning Cheat Sheet" /><published>2021-01-29T04:03:00-06:00</published><updated>2021-01-29T04:03:00-06:00</updated><id>https://andrewryanx.github.io/site/ml/python/2021/01/29/ml-cheatsheet</id><author><name>Andrew Ryan</name><email>andrrvt15@gmail.com</email></author><category term="ML" /><category term="Python" /><summary type="html">Machine Learning Cheat Sheet</summary></entry><entry><title type="html">Python Cheat Sheet</title><link href="https://andrewryanx.github.io/site/python/2021/01/29/py-cheatsheet.html" rel="alternate" type="text/html" title="Python Cheat Sheet" /><published>2021-01-29T04:02:00-06:00</published><updated>2021-01-29T04:02:00-06:00</updated><id>https://andrewryanx.github.io/site/python/2021/01/29/py-cheatsheet</id><author><name>Andrew Ryan</name><email>andrrvt15@gmail.com</email></author><category term="Python" /><summary type="html">Python Cheat Sheet Import Modules import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import glob Data Frame I/O Read CSV pd.read_csv('filepath\filename.csv') Create DataFrame from multiple files and assign filename to column files = sorted(glob('filepath\*.csv')); pd.concat((pd.read_csv(file).assign(filename=file) for file in files),ignore_index=True) Write CSV pd.to_csv('filepath\filename.csv', columns=['columns to write'], index=False) #write csv Data Manipulation &amp;amp; Interrogation Select first n number of rows df.head(n) Select bottom n number of rows df.tail(n) Select random n number of rows df.sample(n) Get the shape of the DataFrame df.shape Get the dtypes of the columns df.dtypes Get the number of rows in dataframe len(df) Calculate the number of missing values df.isna().sum().sum() Returns series denoting duplicate rows df.duplicated Drop duplicates by column df.drop_duplicates(subset=['column to check for dupes'], inplace=True) Drop columns in DataFrame df.drop(columns=['column to drop'], inplace=True) Drop null values df.dropna(axis=0, how='any', subset=['columns to drop if null values exist']) Get the number of distinct values in a column df['column'].nunique() Count numer of rows with each unique value of variable df['column'].value_counts() Replace values in column with new value df['column'].replace(&amp;lt;current value&amp;gt;,&amp;lt;target value&amp;gt;) Group DataFrame by column df.groupby('column') Sort values of column df.sortvalues('column to use', ascending=True) Filter DataFrame by multiple OR conditions df[df.column.isin(['value 1', 'value2', 'value3'])] Invert filter df[~df.column.isin(['value 1', 'value2', 'value3'])] Rename columns df.rename(columns = {'current name':'target name'}) Add prefix to column name df.add_prefix('prefix') Add suffix to column name df.add_suffix('suffix') Gather columns into rows pd.melt(df) Spread rows into columns df.pivot(columns='columns to use',values='values to use') Select rows by position df.iloc[0:9] Select and order top n entries df.nlargest(n) Select and order bottom n entries df.nsmallest(n) Select columns whose name matches regular expression df.filter(regex='search term') Make column of strings uppercase df['column'].str.upper() Append rows of multiple dataframes df.concat([df1, df2]) Append columns of multiple dataframes df.concat([df1, df2], axis=1) Join matching rows drom df1 to df pd.merge(df1,df2, how='left', on='column to join on') Join rows from df2 to df1 pd.merge(df1,df2, how='right', on='column to join on') Join data, retain only rows in both sets pd.merge(df1,df2, how='inner', on='column to join on') Join data, retain all values, all rows pd.merge(df1,df2, how='outer', on='column to join on') Split dataframe into two random subsets, only works if index is unique df1 = df.sample(frac=0.5,random_state=42); df2 = df.drop(df1.index) Apply function to dataframe f = lambda x: &amp;lt;function&amp;gt;; df.apply(f) df.insert(&amp;lt;location, e.g. 3&amp;gt;, 'column name') Split string to new column, keeping first word df['column'] = df.column.str.split(', ',expand=True)[0] Descriptive Statistics df.describe().round(3) Sum values of each object. df.sum() Median value of each object. df.median() Quantiles of each object. df.quantile([0.25,0.75]) Minimum value in each object df.min() Maximum value in each object. df.max() Mean value of each object. df.mean() Variance of each object. df.var() Standard deviation of each object df.std() Count non-NA/null values of each object. df.count() Feature Engineering One hot encode columns pd.get_dummies(df) Interpolate missing values in time series data df.interpolate() Fill null values df['column to find null values'].fillna(value=df['column with null values'].median(), inplace=True) Data Visulations Column distributions df_nona = df.dropna(axis=0, how='any', subset=['list of columns to subset']) ax_list = df.hist(bins=25, layout=(4,4), figsize=(15,15)) df_nona.describe().round(3) Corrleation heatmap CATEGORICAL_FEATURES = ['list of columns with categorical features'] corr = df[CATEGORICAL_FEATURES].corr() mask = np.triu(np.ones_like(corr, dtype=np.bool)) plt.figure(figsize=(20,10)) cmap = sns.diverging_palette(230, 20, as_cmap=True) sns.heatmap(corr,mask=mask,cmap=cmap,annot=True) Calendar heatmap flights = sns.load_dataset(&quot;flights&quot;) flights = flights.pivot(&quot;month&quot;, &quot;year&quot;, &quot;passengers&quot;) sns.heatmap(flights, annot=True, fmt=&quot;d&quot;) plt.show() Save figure plt.savefig('filename.ext')</summary></entry><entry><title type="html">Statistics Cheat Sheet</title><link href="https://andrewryanx.github.io/site/statistics/python/2021/01/29/stats-cheatsheet.html" rel="alternate" type="text/html" title="Statistics Cheat Sheet" /><published>2021-01-29T04:02:00-06:00</published><updated>2021-01-29T04:02:00-06:00</updated><id>https://andrewryanx.github.io/site/statistics/python/2021/01/29/stats-cheatsheet</id><author><name>Andrew Ryan</name><email>andrrvt15@gmail.com</email></author><category term="Statistics" /><category term="Python" /><summary type="html">Statistics Cheat Sheet</summary></entry><entry><title type="html">Data Science Glossary</title><link href="https://andrewryanx.github.io/site/statistics/ml/2021/01/29/glossary.html" rel="alternate" type="text/html" title="Data Science Glossary" /><published>2021-01-29T04:00:00-06:00</published><updated>2021-01-29T04:00:00-06:00</updated><id>https://andrewryanx.github.io/site/statistics/ml/2021/01/29/glossary</id><author><name>Andrew Ryan</name><email>andrrvt15@gmail.com</email></author><category term="Statistics" /><category term="ML" /><summary type="html">Data Science Glossary</summary></entry></feed>